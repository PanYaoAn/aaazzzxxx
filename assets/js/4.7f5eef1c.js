(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{170:function(t,n,s){"use strict";s.r(n);var e=s(0),i=Object(e.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"content"},[n("h2",{attrs:{id:"call"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#call"}},[this._v("#")]),this._v(" call")]),this._v(" "),n("h3",{attrs:{id:"call继承特点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#call继承特点"}},[this._v("#")]),this._v(" CALL继承特点")]),this._v(" "),n("pre",[n("code",[this._v("在子类方法当中吧父类当做普通函数指向,让父类的this指向子类的的实例\n相当于给子类的实例设置了很多私有很多属性或者方法\n1.只能继承父类的私有属性或者方法(因为是吧父类当做普通函数执行和其原型上属性和方法没有关系)\n2.父类私有变为子类私有\n\n  function A(x) {\n    // x s私有属性\n    this.x = x\n}\nA.prototype.getX = function() {\n    console.log(this.x)\n}\n\nfunction B(y) {\n    A.call(this, 200) ///this指向b的实例\n    this.y = y;\n}\nB.prototype.getY = function() {\n    console.log(this.y)\n}\nlet b1 = new B(100);\nb1.y;\nb1.getY()\nb1.X //undefind")])])])}],!1,null,null,null);n.default=i.exports}}]);