(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{211:function(n,t,e){"use strict";e.r(t);var o=e(0),s=Object(o.a)({},(function(){var n=this.$createElement;this._self._c;return this._m(0)}),[function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("div",{staticClass:"content"},[e("h3",{attrs:{id:"_1-1-形参默认值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-形参默认值"}},[n._v("#")]),n._v(" 1.1 形参默认值")]),n._v(" "),e("p",[n._v("声明函数时给形参设置默认值。在函数调用时，如果没有传入实参则使用形参默认值；如果传入了实参则使用实参的值。")]),n._v(" "),e("pre",[e("code",[n._v("function add(a = 10, b = 20) {\n    console.log(a + b);\n }\n  add(1, 3); // 4 如果函数调用时传入了实参，则使用实参\n  add(); // 30  如果函数调用是没有纯如实参，则使用形参的默认值\n")])]),n._v(" "),e("h3",{attrs:{id:"_1-2-rest参数（剩余参数）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-rest参数（剩余参数）"}},[n._v("#")]),n._v(" 1.2 rest参数（剩余参数）")]),n._v(" "),e("p",[n._v("函数调用时，实参会以数组形式保存在args变量中")]),n._v(" "),e("pre",[e("code",[n._v("  function getData(...args) {\n    console.log(args); //  [1, 2, 3, 4, 5, 6]\n  }\n  getData(1, 2, 3, 4, 5, 6);\n\n function getData(a, ...args) {\n    console.log(a); 1\n\n    console.log(args); //  [2, 3, 4, 5, 6]\n  }\n  getData(1, 2, 3, 4, 5, 6);\n")])]),n._v(" "),e("h3",{attrs:{id:"_1-3-箭头函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-箭头函数"}},[n._v("#")]),n._v(" 1.3 箭头函数")]),n._v(" "),e("p",[n._v("箭头函数的定义方式")]),n._v(" "),e("pre",[e("code",[n._v("箭头函数的用法和普通函数用法==几乎==一致\n去掉 function 关键词\n() 和 {} 之间增加 =>\n\n//匿名函数\nfunction () {}  \n() => {}        \n\n//命名函数\nlet show = function () {}\nlet show = () => {}\n")])]),n._v(" "),e("p",[n._v("箭头函数的特殊点")]),n._v(" "),e("p",[n._v("·箭头函数不能作为构造函数")]),n._v(" "),e("pre",[e("code",[n._v(' // 构造函数\nfunction Person(name, age) {\n\tthis.name = name;\n\tthis.age = age;\n}\n\nvar p = new Person("lisi", 30);\nconsole.log(p); // Person {name: "lisi", age: 30}\n// 箭头函数\nlet Son = () => {\n\tthis.name;\n\tthis.age;\n};\n\nvar v = new Son(); //报错: Person is not a constructor\nconsole.log(v);\n')])]),n._v(" "),e("p",[n._v("箭头函数没有this对象，在箭头函数中的this指的函数外层的对象")]),n._v(" "),e("pre",[e("code",[n._v("<button>btn</button>\n<script>\n//为button注册点击事件，弹出当前按钮上的文字\nvar btn = document.querySelector('button');\nbtn.onclick = function () {\n   alert(this.innerText);  //成功弹出，普通函数中this指向调用者\n}\n\nbtn.onclick = () => {\n    alert(this.innerText);  //弹出undefined，因为this指向window，而window没有innerText属性\n}\n<\/script>\n")])]),n._v(" "),e("p",[n._v("箭头函数没有arguments，要使用可变参数可以使用 rest 方式")]),n._v(" "),e("pre",[e("code",[n._v("let show = () => {\n    console.log(arguments);  //报错: arguments is not defined\n}\n\nshow(1,2,3);\n")])]),n._v(" "),e("p",[n._v("如果函数体只有一句并且设置了返回值，则不需要使用大括号，不需要return")]),n._v(" "),e("pre",[e("code",[n._v("let add = (x = 1, y = 2) => x + y;\n\nconsole.log(add(10, 20)); \nconsole.log(add()); \n")])]),n._v(" "),e("p",[n._v("如果函数中只有一个参数，则不需要写小括号")]),n._v(" "),e("pre",[e("code",[n._v("let add = x => x + 5;\n\nconsole.log(add(3));  // 8")])])])}],!1,null,null,null);t.default=s.exports}}]);