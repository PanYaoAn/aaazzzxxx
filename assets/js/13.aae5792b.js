(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{179:function(r,n,e){"use strict";e.r(n);var a=e(0),i=Object(a.a)({},(function(){var r=this.$createElement;this._self._c;return this._m(0)}),[function(){var r=this,n=r.$createElement,e=r._self._c||n;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"如何实现数组去重"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何实现数组去重"}},[r._v("#")]),r._v(" 如何实现数组去重")]),r._v(" "),e("p",[r._v("###方法一，使用 splice 方法删除重复的元素\nvar arr = [7, 1, 'hi', 1, 'hi', true, null, undefined, true, null, undefined];\nfunction normalize (arr) {\nif (arr && Array.isArray(arr)) {\nvar len = arr.length,\nmap = {};\nfor (var i = len - 1; i >= 0; i--) {\nif (arr[i] in map) {\narr.splice(i, 1);\n} else {\nmap[arr[i]] = true;\n}\n}\nreturn arr;\n}\n}\nconsole.log('数组去重后', normalize(arr));")]),r._v(" "),e("h3",{attrs:{id:"方法二：利用indexof方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法二：利用indexof方法"}},[r._v("#")]),r._v(" 方法二：利用indexOf方法")]),r._v(" "),e("pre",[e("code",[r._v("var arr = [7, 1, 'hi', 1, 'hi', true, null, undefined, true, null, undefined];\nfunction normalize (arr) {\n  if (arr && Array.isArray(arr)) {\n  var len = arr.length,\n    res = [];\n  for (var i = 0; i < len; i++) {\n    if (res.indexOf(arr[i]) == -1) {\n      res.push(arr[i]);\n    }\n  }\n  return res;\n }\n}\nconsole.log('数组去重后', normalize(arr));\n")])]),r._v(" "),e("h3",{attrs:{id:"方法三，巧用扩展运算符和-set-数据结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法三，巧用扩展运算符和-set-数据结构"}},[r._v("#")]),r._v(" 方法三，巧用扩展运算符和 Set 数据结构")]),r._v(" "),e("pre",[e("code",[r._v("var arr = [7, 1, 'hi', 1, 'hi', true, null, undefined, true, null, undefined];\nfunction normalize (arr) {\n  if (arr && Array.isArray(arr)) {\n    var res = [...new Set(arr)];\n    return res;\n  }\n}\nconsole.log('数组去重后', normalize(arr));\n")])]),r._v(" "),e("h3",{attrs:{id:"方法四，使用-es6-中新的-api-—-array-from-来实现方法三中扩展运算符的功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法四，使用-es6-中新的-api-—-array-from-来实现方法三中扩展运算符的功能"}},[r._v("#")]),r._v(" 方法四，使用 ES6 中新的 API — Array.from() 来实现方法三中扩展运算符的功能")]),r._v(" "),e("pre",[e("code",[r._v("var arr = [7, 1, 'hi', 1, 'hi', true, null, undefined, true, null, undefined];\n\nfunction normalize (arr) {\n  if (arr && Array.isArray(arr)) {\n    var res = Array.from(new Set(arr));\n    return res;\n  }\n}\nconsole.log('数组去重后', normalize(arr));")])])])}],!1,null,null,null);n.default=i.exports}}]);